
import streamlit as st
import pandas as pd
import numpy as np
import unicodedata

st.set_page_config(page_title="ÏÑ†Î∞úÌà¨Ïàò Î∂ÑÏÑùÍ∏∞", layout="centered")
st.title("‚öæÔ∏è ÏÑ†Î∞úÌà¨Ïàò Î∂ÑÏÑùÍ∏∞ (CSV Í∏∞Î∞ò)")

def normalize_name(name: str) -> str:
    return unicodedata.normalize('NFKD', name).encode('ascii', 'ignore').decode('utf-8').lower().strip()

def calculate_starter_score_v4_1(row, pitch_usage, num_pitches_over_15, quantiles, pitch_data):
    score, logs = 0, []
    q = quantiles

    def pct_score(val, col, label, weight):
        nonlocal score
        boundaries = q[col].values
        cuts = [weight * x for x in [1.0, 5/6, 4/6, 3/6, 2/6, 1/6, 0]]
        score_add = float(np.interp(val, boundaries, cuts[::-1]))
        score += score_add
        logs.append(f"{label} ‚Üí +{round(score_add, 1)}")

    def inv_score(val, col, label, weight):
        nonlocal score
        boundaries = q[col].values
        cuts = [weight * x for x in [1.0, 5/6, 4/6, 3/6, 2/6, 1/6, 0]]
        score_add = float(np.interp(val, boundaries, cuts))
        score += score_add
        logs.append(f"{label} ‚Üí +{round(score_add, 1)}")

    inv_score(row['xwoba'], 'xwoba', 'xwOBA', 25)
    inv_score(row['barrels_per_bbe_percent'], 'barrels_per_bbe_percent', 'Barrel%', 20)
    inv_score(row['xslg'], 'xslg', 'xSLG', 15)
    pct_score(row['swing_miss_percent'], 'swing_miss_percent', 'Whiff%', 20)

    if row['bb_percent'] <= 5: score += 15; logs.append("BB% ‚â§5 ‚Üí +15")
    elif row['bb_percent'] <= 7: score += 12; logs.append("BB% ‚â§7 ‚Üí +12")
    elif row['bb_percent'] <= 9: score += 9; logs.append("BB% ‚â§9 ‚Üí +9")
    elif row['bb_percent'] <= 11: score += 6; logs.append("BB% ‚â§11 ‚Üí +6")
    elif row['bb_percent'] <= 13: score += 3; logs.append("BB% ‚â§13 ‚Üí +3")
    else: logs.append("BB% >13 ‚Üí +0")

    top_2_usage = sum(sorted(pitch_data.values(), reverse=True)[:2])
    if top_2_usage >= 75: score -= 5; logs.append("ÏÉÅÏúÑ 2Í∞ú Íµ¨Ï¢Ö ‚â•75% ‚Üí -5")
    elif top_2_usage >= 70: score -= 4; logs.append("ÏÉÅÏúÑ 2Í∞ú Íµ¨Ï¢Ö ‚â•70% ‚Üí -4")
    elif top_2_usage >= 65: score -= 3; logs.append("ÏÉÅÏúÑ 2Í∞ú Íµ¨Ï¢Ö ‚â•65% ‚Üí -3")
    elif top_2_usage >= 60: score -= 2; logs.append("ÏÉÅÏúÑ 2Í∞ú Íµ¨Ï¢Ö ‚â•60% ‚Üí -2")
    elif top_2_usage >= 55: score -= 1; logs.append("ÏÉÅÏúÑ 2Í∞ú Íµ¨Ï¢Ö ‚â•55% ‚Üí -1")

    if num_pitches_over_15 >= 3: score += 5; logs.append("Îã§ÏñëÏÑ± ‚â•3Í∞ú ‚Üí +5")
    elif num_pitches_over_15 == 2: score += 3; logs.append("Îã§ÏñëÏÑ± 2Í∞ú ‚Üí +3")
    elif num_pitches_over_15 == 1: score += 1; logs.append("Îã§ÏñëÏÑ± 1Í∞ú ‚Üí +1")

    tp = row['total_pitches']
    if tp >= 2500: score += 5; logs.append("Ìà¨Íµ¨ Ïàò ‚â•2500 ‚Üí +5")
    elif tp >= 1500: score += 3; logs.append("Ìà¨Íµ¨ Ïàò ‚â•1500 ‚Üí +3")
    elif tp >= 800: score += 1; logs.append("Ìà¨Íµ¨ Ïàò ‚â•800 ‚Üí +1")

    return max(score, 0), logs

csv = st.file_uploader("üìÇ CSV ÌååÏùº ÏóÖÎ°úÎìú (pitchers vs all.csv)", type="csv")

if csv:
    df = pd.read_csv(csv)
    df['normalized_player'] = df['player'].apply(normalize_name)
    quantiles = df[df['total_pitches'] >= 100].quantile([0.05,0.10,0.25,0.50,0.75,0.90,0.95])

    pitcher_name = st.text_input("Ìà¨Ïàò Ïù¥Î¶Ñ ÏûÖÎ†• (Ïòà: Spencer Strider)")
    pitch_input = st.text_area("Íµ¨Ï¢Ö ÏÇ¨Ïö©Î•† ÏûÖÎ†• (Ïòà: 4-Seam:51.1, Slider:32.6)")

    if st.button("üîç Î∂ÑÏÑù Ïã§Ìñâ") and pitcher_name and pitch_input:
        try:
            pitch_usage = {k.strip(): float(v.strip()) for k,v in (item.split(":") for item in pitch_input.split(","))}
            num_15 = sum(1 for v in pitch_usage.values() if v >= 15)
            row = df[df['normalized_player'] == normalize_name(pitcher_name)]
            if row.empty:
                st.error("Ìà¨ÏàòÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
            else:
                row = row.iloc[0]
                pitch_cols = ['4-Seam', 'Sinker', 'Cutter', 'Slider', 'Changeup', 'Curve', 'Splitter']
                pitch_data = {col: row[col] for col in pitch_cols if col in row and pd.notna(row[col]) and row[col] > 0}
                score, logs = calculate_starter_score_v4_1(row, pitch_usage, num_15, quantiles, pitch_data)
                st.success(f"Ï¥ùÏ†ê: {round(score, 1)}Ï†ê")
                st.subheader("üìã Ï†êÏàò ÏÑ∏Î∂Ä Î°úÍ∑∏")
                for log in logs:
                    st.write("-", log)
        except Exception as e:
            st.error(f"ÏûÖÎ†• Ïò§Î•ò: {e}")
